// Code generated by internal/generate/tagstests/main.go; DO NOT EDIT.

{{ define "Init" }}
	ctx := acctest.Context(t)
	{{ if .ExistsTypeName -}}
	var v {{ .ExistsTypeName }}
	{{ end -}}
	resourceName := "{{ .TypeName}}.test"{{ if .Generator }}
	rName := {{ .Generator }}
{{- end }}
{{ range .InitCodeBlocks -}}
{{ .Code }}
{{- end }}
{{ end }}

{{ define "TestCaseSetup" -}}
{{ template "TestCaseSetupNoProviders" . }}
	ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
{{- end }}

{{ define "TestCaseSetupNoProviders" -}}
	PreCheck:     func() { acctest.PreCheck(ctx, t){{ if .PreCheck }}; testAccPreCheck(ctx, t){{ end }} },
	ErrorCheck:   acctest.ErrorCheck(t, names.{{ .ProviderNameUpper }}ServiceID),
	CheckDestroy: testAccCheck{{ .Name }}Destroy(ctx),
{{- end }}

{{ define "ImportBody" }}
	ResourceName: resourceName,
	ImportState:  true,
{{ if gt (len .ImportStateID) 0 -}}
	ImportStateId: {{ .ImportStateID }},
{{ end -}}
	ImportStateVerify: true,
{{ if gt (len .ImportIgnore) 0 -}}
	ImportStateVerifyIgnore: []string{
	{{ range $i, $v := .ImportIgnore }}{{ $v }},{{ end }}
	},
{{- end }}
{{ end }}

{{ define "testname" -}}
{{ if .Serialize }}testAcc{{ else }}TestAcc{{ end }}{{ .ProviderNameUpper }}{{ .Name }}
{{- end }}

{{ define "ExistsCheck" }}
	testAccCheck{{ .Name }}Exists(ctx, resourceName{{ if .ExistsTypeName}}, &v{{ end }}),
{{ end }}

package {{ .ProviderPackage }}_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/config"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
	"github.com/hashicorp/terraform-provider-aws/names"
	{{ range .GoImports -}}
	{{ if .Alias }}{{ .Alias }} {{ end }}"{{ .Path }}"
	{{ end }}
)

{{ if .Serialize }}
func {{ template "testname" . }}_tagsSerial(t *testing.T) {
	t.Helper()

	t.Run("basic", {{ template "testname" . }}_tags)
	t.Run("null", {{ template "testname" . }}_tags_null)
	t.Run("AddOnUpdate", {{ template "testname" . }}_tags_AddOnUpdate)
	t.Run("EmptyTag_OnCreate", {{ template "testname" . }}_tags_EmptyTag_OnCreate)
	t.Run("EmptyTag_OnUpdate_Add", {{ template "testname" . }}_tags_EmptyTag_OnUpdate_Add)
	t.Run("EmptyTag_OnUpdate_Replace", {{ template "testname" . }}_tags_EmptyTag_OnUpdate_Replace)
	t.Run("DefaultTags_providerOnly", {{ template "testname" . }}_tags_DefaultTags_providerOnly)
	t.Run("DefaultTags_nonOverlapping", {{ template "testname" . }}_tags_DefaultTags_nonOverlapping)
	t.Run("DefaultTags_overlapping", {{ template "testname" . }}_tags_DefaultTags_overlapping)
	t.Run("DefaultTags_updateToProviderOnly", {{ template "testname" . }}_tags_DefaultTags_updateToProviderOnly)
	t.Run("DefaultTags_updateToResourceOnly", {{ template "testname" . }}_tags_DefaultTags_updateToResourceOnly)
	t.Run("DefaultTags_emptyResourceTag", {{ template "testname" . }}_tags_DefaultTags_emptyResourceTag)
	t.Run("DefaultTags_nullOverlappingResourceTag", {{ template "testname" . }}_tags_DefaultTags_nullOverlappingResourceTag)
	t.Run("DefaultTags_nullNonOverlappingResourceTag", {{ template "testname" . }}_tags_DefaultTags_nullNonOverlappingResourceTag)
	t.Run("ComputedTag_OnCreate", {{ template "testname" . }}_tags_ComputedTag_OnCreate)
	t.Run("ComputedTag_OnUpdate_Add", {{ template "testname" . }}_tags_ComputedTag_OnUpdate_Add)
	t.Run("ComputedTag_OnUpdate_Replace", {{ template "testname" . }}_tags_ComputedTag_OnUpdate_Replace)
}
{{ end }}

func {{ template "testname" . }}_tags(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1updated"),
						"key2": config.StringVariable("value2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags.key2", "value2"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1updated"),
						"key2": config.StringVariable("value2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key2": config.StringVariable("value2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key2", "value2"),
				),
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key2": config.StringVariable("value2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
				),
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
		},
	})
}

func {{ template "testname" . }}_tags_null(t *testing.T) {
{{- if eq .Implementation "framework" }}
	t.Skip("Tags with null values are not correctly handled with the Plugin Framework")
{{ end }}
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": nil,
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": nil,
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				PlanOnly:           true,
				ExpectNonEmptyPlan: false,
			},
		},
	})
}

func {{ template "testname" . }}_tags_AddOnUpdate(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_EmptyTag_OnCreate(t *testing.T) {
{{- if .SkipEmptyTags }}
	t.Skip("Resource {{ .Name }} does not support empty tags")
{{ end }}
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", ""),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_EmptyTag_OnUpdate_Add(t *testing.T) {
{{- if .SkipEmptyTags }}
	t.Skip("Resource {{ .Name }} does not support empty tags")
{{ end }}
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
						"key2": config.StringVariable(""),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key2", ""),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
						"key2": config.StringVariable(""),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_EmptyTag_OnUpdate_Replace(t *testing.T) {
{{- if .SkipEmptyTags }}
	t.Skip("Resource {{ .Name }} does not support empty tags")
{{ end }}
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", ""),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_DefaultTags_providerOnly(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1updated"),
						"key2": config.StringVariable("value2"),
					}),
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key2", "value2"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1updated"),
						"key2": config.StringVariable("value2"),
					}),
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key2": config.StringVariable("value2"),
					}),
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key2", "value2"),
				),
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key2": config.StringVariable("value2"),
					}),
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "0"),
				),
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
		},
	})
}

func {{ template "testname" . }}_tags_DefaultTags_nonOverlapping(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": config.StringVariable("resourcevalue1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.resourcekey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.providerkey1", "providervalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.resourcekey1", "resourcevalue1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": config.StringVariable("resourcevalue1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1updated"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": config.StringVariable("resourcevalue1updated"),
						"resourcekey2": config.StringVariable("resourcevalue2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags.resourcekey1", "resourcevalue1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags.resourcekey2", "resourcevalue2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "3"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.providerkey1", "providervalue1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.resourcekey1", "resourcevalue1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.resourcekey2", "resourcevalue2"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1updated"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": config.StringVariable("resourcevalue1updated"),
						"resourcekey2": config.StringVariable("resourcevalue2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "0"),
				),
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
				{{ if .NoRemoveTags -}}
				SkipFunc: testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t),
				{{ end }}
			},
		},
	})
}

func {{ template "testname" . }}_tags_DefaultTags_overlapping(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey1", "resourcevalue1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
						"overlapkey2": config.StringVariable("providervalue2"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue1"),
						"overlapkey2": config.StringVariable("resourcevalue2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey2", "resourcevalue2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey2", "resourcevalue2"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
						"overlapkey2": config.StringVariable("providervalue2"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue1"),
						"overlapkey2": config.StringVariable("resourcevalue2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey1", "resourcevalue2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey1", "resourcevalue2"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue2"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_DefaultTags_updateToProviderOnly(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_DefaultTags_updateToResourceOnly(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_DefaultTags_emptyResourceTag(t *testing.T) {
{{- if .SkipEmptyTags }}
	t.Skip("Resource {{ .Name }} does not support empty tags")
{{ end }}
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", ""),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", ""),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_DefaultTags_nullOverlappingResourceTag(t *testing.T) {
{{- if eq .Implementation "framework" }}
	t.Skip("Tags with null values are not correctly handled with the Plugin Framework")
{{ end }}
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": nil,
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "providervalue1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": nil,
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_DefaultTags_nullNonOverlappingResourceTag(t *testing.T) {
{{- if eq .Implementation "framework" }}
	t.Skip("Tags with null values are not correctly handled with the Plugin Framework")
{{ end }}
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": nil,
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "0"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.providerkey1", "providervalue1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags_defaults/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": nil,
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_ComputedTag_OnCreate(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tagsComputed1/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"unknownTagKey": config.StringVariable("computedkey1"),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttrPair(resourceName, "tags.computedkey1", "null_resource.test", names.AttrID),
				),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionCreate),
						plancheck.ExpectUnknownValue(resourceName, tfjsonpath.New(names.AttrTags){{ if eq .Implementation "framework" }}.AtMapKey("computedkey1"){{ end}}),
					},
					PostApplyPreRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
					PostApplyPostRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
				},
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tagsComputed1/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"unknownTagKey": config.StringVariable("computedkey1"),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_ComputedTag_OnUpdate_Add(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tagsComputed2/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"unknownTagKey": config.StringVariable("computedkey1"),
					"knownTagKey":   config.StringVariable("key1"),
					"knownTagValue": config.StringVariable("value1"),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "2"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttrPair(resourceName, "tags.computedkey1", "null_resource.test", names.AttrID),
				),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionUpdate),
						plancheck.ExpectUnknownValue(resourceName, tfjsonpath.New(names.AttrTags){{ if eq .Implementation "framework" }}.AtMapKey("computedkey1"){{ end}}),
					},
					PostApplyPreRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
					PostApplyPostRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
				},
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tagsComputed2/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"unknownTagKey": config.StringVariable("computedkey1"),
					"knownTagKey":   config.StringVariable("key1"),
					"knownTagValue": config.StringVariable("value1"),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}

func {{ template "testname" . }}_tags_ComputedTag_OnUpdate_Replace(t *testing.T) {
	{{- template "Init" . }}

	resource.{{ if .Serialize }}Test{{ else }}ParallelTest{{ end }}(t, resource.TestCase{
		{{ template "TestCaseSetupNoProviders" . }}
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tags/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName": config.StringVariable(rName),{{ end }}
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tagsComputed1/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"unknownTagKey": config.StringVariable("key1"),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
					resource.TestCheckResourceAttr(resourceName, "tags.%", "1"),
					resource.TestCheckResourceAttrPair(resourceName, "tags.key1", "null_resource.test", names.AttrID),
				),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionUpdate),
						plancheck.ExpectUnknownValue(resourceName, tfjsonpath.New(names.AttrTags){{ if eq .Implementation "framework" }}.AtMapKey("key1"){{ end}}),
					},
					PostApplyPreRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
					PostApplyPostRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
				},
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/{{ .Name }}/tagsComputed1/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					"rName":         config.StringVariable(rName),{{ end }}
					"unknownTagKey": config.StringVariable("key1"),
					{{ range $name, $value := .AdditionalTfVars -}}
					"{{ $name }}": config.StringVariable({{ $value }}),
					{{ end }}
				},
				{{- template "ImportBody" . -}}
			},
		},
	})
}
{{ if .NoRemoveTags }}
func testAcc{{ .ProviderNameUpper }}{{ .Name }}_removingTagNotSupported(t *testing.T) func() (bool, error) {
	return func() (bool, error) {
		t.Log("Skipping step: Resource {{ .Name }} does not support removing tags")
		return true, nil
	}
}
{{ end }}
